{
  "add code to the Hello function body": {
    "body": [
      "message := \"ðŸ˜ƒ Hello \" + args[0].String() // get the parameters",
      "fmt.Println(message)",
      "return message  ",
      ""
    ],
    "description": "",
    "prefix": "go6-add code to the Hello function body",
    "scope": "go"
  },
  "add go wasm runtime": {
    "body": [
      "//Go Wasm runtime provided by wasm_exec.js",
      "const go = new Go() // Go Wasm runtime",
      "let importObject = go.importObject",
      ""
    ],
    "description": "",
    "prefix": "go2-add go wasm runtime",
    "scope": "html,javascript"
  },
  "call Hello function": {
    "body": [
      "let message = Hello(\"Bob Morane\")",
      "document.querySelector(\"h1\").innerHTML = message",
      ""
    ],
    "description": "",
    "prefix": "go4-call Hello function",
    "scope": "html,javascript"
  },
  "create Hello function": {
    "body": [
      "func Hello(this js.Value, args []js.Value) interface{} {",
      "  // ! The `Hello` function takes two parameters (`this` and `args`) and returns an `interface{}` type.",
      "  // ! The first parameter (`this`) refers to the JavaScript's global object.",
      "  // ! The second parameter is a slice of `[]js.Value` representing",
      "  // ! the arguments passed to the Javascript function call.",
      "",
      "  // 6- add some code",
      "",
      "}",
      ""
    ],
    "description": "",
    "prefix": "go5-create Hello function",
    "scope": "go"
  },
  "export the Hello function": {
    "body": [
      "// ? Add the `Hello` function to the `global` JavaScript object,",
      "js.Global().Set(\"Hello\", js.FuncOf(Hello))",
      ""
    ],
    "description": "",
    "prefix": "go7-export the Hello function",
    "scope": "go"
  },
  "include go support": {
    "body": [
      "\u003cscript src=\"wasm_exec.js\"\u003e\u003c/script\u003e",
      ""
    ],
    "description": "",
    "prefix": "go1-include go support",
    "scope": "html,javascript"
  },
  "launch the instance": {
    "body": [
      "// execute `main`",
      "go.run(instance)",
      ""
    ],
    "description": "",
    "prefix": "go3-launch the instance",
    "scope": "html,javascript"
  },
  "prevent to exit": {
    "body": [
      "\u003c-make(chan bool)",
      "",
      "// ! The Go runtime (JavaScript side) uses the wasm file as an application,",
      "// ! runs this application, then exits.",
      "// ? To tell the Go application that we don't want to exit,",
      "// ? we use a channel (the channel will pause the execution).",
      ""
    ],
    "description": "",
    "prefix": "go8-prevent to exit",
    "scope": "go"
  }
}